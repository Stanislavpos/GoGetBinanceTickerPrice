package main

import (
	"GoGetBinanceTickerPrice/getPrice"
	"database/sql"
	_ "github.com/lib/pq"
	"strconv"
	"strings"
	"time"
)

func pricePair(pair string) {
	priceNow := getPrice.TickerPrice(pair)
	priceNow = strings.ReplaceAll(priceNow, "\n", "")
	priceFloat, err := strconv.ParseFloat(priceNow, 64)
	if err != nil {
		panic(err)
	}
	priceFloat = priceFloat * 100
	priceInt := int(priceFloat)

	//db, err := sql.Open("postgres", "user=username password=password host=localhost dbname=mydb sslmode=disable") if err != nil { log.Fatalf("Error: Unable to connect to database: %v", err) } defer db.Close()

	connStr := "user=postgres password=74563 dbname=postgres sslmode=disable"
	db, err := sql.Open("postgres", connStr)
	if err != nil {
		panic(err)
	}
	defer db.Close()
	//result, err := db.Exec("CREATE TABLE btcusdt  (id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,     price integer NOT NULL,   date date NOT NULL);")
	//if err != nil {
	//	panic(err)
	//}

	_, err = db.Exec("insert into btcusdt (price, date) values ($1, $2)", priceInt, time.Now())
	if err != nil {
		panic(err)
	}
}

func main() {
	//getPrice.TickerPrice("BTCUSDT")
	for {
		pricePair("BTCUSDT")
		time.Sleep(time.Second * 3)
	}

	//priceNow := getPrice.TickerPrice("BTCUSDT")
	//priceNow = strings.ReplaceAll(priceNow, "\n", "")
	//priceFloat, err := strconv.ParseFloat(priceNow, 64)
	//if err != nil {
	//	panic(err)
	//}
	//priceFloat = priceFloat * 100
	//priceInt := int(priceFloat)
	//
	////db, err := sql.Open("postgres", "user=username password=password host=localhost dbname=mydb sslmode=disable") if err != nil { log.Fatalf("Error: Unable to connect to database: %v", err) } defer db.Close()
	//
	//connStr := "user=postgres password=74563 dbname=postgres sslmode=disable"
	//db, err := sql.Open("postgres", connStr)
	//if err != nil {
	//	panic(err)
	//}
	//defer db.Close()
	////result, err := db.Exec("CREATE TABLE btcusdt  (id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,     price integer NOT NULL,   date date NOT NULL);")
	////if err != nil {
	////	panic(err)
	////}
	//
	//_, err = db.Exec("insert into btcusdt (price, date) values ($1, $2)", priceInt, time.Now())
	//if err != nil {
	//	panic(err)
	//}
	//fmt.Println(priceNow)   //
	//fmt.Println(priceFloat) //
	//fmt.Println(priceInt)
	//fmt.Println(result.RowsAffected()) // количество добавленных строк

}
